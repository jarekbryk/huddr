[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hudd-R book",
    "section": "",
    "text": "1 About this book\nThis online book supports students in the Division of Biomedical and Life Sciences at the University of Huddersfield as they learn R. Unlike step-by-step tutorials, it is designed as a quick reference: core functions, key parameters, and example syntax collected in one place. While most details also exist in R‚Äôs help pages, we have tailored the content to our curriculum and the common challenges that students face.\nThe book was co-designed and co-written with second-year students in 2024/25 and will continue to evolve each year based on student input. If you spot typos, errors, or unclear explanations‚Äîor have ideas to improve or extend the content‚Äîplease see how to contribute.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>About this book</span>"
    ]
  },
  {
    "objectID": "index.html#how-this-book-is-organised",
    "href": "index.html#how-this-book-is-organised",
    "title": "Hudd-R book",
    "section": "1.1 How this book is organised",
    "text": "1.1 How this book is organised\nThis book has five parts:\n\nPart 1: Introduction ‚Äî (this page) describes our idea for the book, how it‚Äôs organised, and brief context on our approach to teaching R (see tidyverse vs base R and LLMs in learning R). It also encourages you to contribute to the development of the book.\nPart 2: Preparations ‚Äî deals with preparing your computer: installing R, adjusting the RStudio interface, getting required packages, and using Posit Cloud for those who can only use Chromebooks or iPads. It also contains an important practical chapter on how to use a computer for operations on files and folders in Windows and macOS.\nPart 3: R fundamentals ‚Äî the key content that you will use the most: references on loading data, handling missing values, essential functions and their parameters, reshaping and joining data, visualisation with ggplot2, running basic statistical tests, and an introduction to functions and loops. It also contains a chapter with self-checking exercises that run entirely in the browser and are useful to make sure you are ‚Äúgetting it‚Äù as you go along.\nPart 4: Content from classes ‚Äî contains curated code and notes from weekly sessions where R is introduced.\nPart 5: Topic-specific content ‚Äî comprises several independent chapters that support other modules and assignments (e.g., quality control and limits of detection for the Professional Skills 2; genomics and phylogenetics for the Current Topics in Molecular and Life Sciences (in preparation)).\n\nOnce your tools are ready, our aim is to take you from zero to a first meaningful plot with a simple statistical summary in under 20 minutes üí™üèΩ.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>About this book</span>"
    ]
  },
  {
    "objectID": "index.html#textbooks-for-our-classes",
    "href": "index.html#textbooks-for-our-classes",
    "title": "Hudd-R book",
    "section": "1.2 Textbooks for our classes",
    "text": "1.2 Textbooks for our classes\nThroughout the book and the classes we almost exclusively use the tidyverse dialect of R. For the justification, see the page on tidyverse vs base R. Our recommended textbooks to accompany the classes are:\n\nR for Data Science (second edition) by Hadley Wickham, Mine √áetinkaya-Rundel and Garrett Grolemund, for all kinds of practical information on data science and many explanations of the code that we will be learning. An essential reading and a practical source ‚Äî all the code from the book can be executed, followed and modified in your RStudio.\nR Graphics Cookbook (second edition) by Winston Chang, dedicated entirely to using ggplot2, the package that we use to make all the plots and visualisations of data in the class. Contains recipe-like code snippets on how to make and modify almost every plot that we will be making in class.\n\nBoth are freely available online.\n\n1.2.1 What about large language models?\nAh, yes, we are glad you asked.\n\n\n\nScreenshot of a chat assistant incorrectly counting the letter ‚Äòb‚Äô in ‚Äúblueberry‚Äù (shows ‚ÄúTotal: 3‚Äù)",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>About this book</span>"
    ]
  },
  {
    "objectID": "index.html#how-to-learn-r",
    "href": "index.html#how-to-learn-r",
    "title": "Hudd-R book",
    "section": "1.3 How to learn R",
    "text": "1.3 How to learn R\nR is difficult for beginners and there is no way to sugarcoat it. The learning curve is steep, but we do not think it is very long: once you master a handful of commands and syntax principles, your own curiosity will drive you to transform, analyse and visualise your own data. There is only one principle we must emphasise for all students: practice.\n\nIt cannot be overstated how important is your own practice to learning R. Run the examples as you read, then try to change them ‚Äî alter a number, rename a variable, or add a new line ‚Äî and see what happens. One of the great advantages of coding is that you can always check your workings ‚Äî run the code in a different way, or on modified data, and see whether the output you get is the one you expect.\nComputers are stupid and they are very particular about the way their instructions have to be written, so the vast majority of the errors you will encounter initially will be typos and mispaired brackets and not errors in the actual intent of the code. The more often you experiment, the faster you will become comfortable with R, and the sooner you will be able to use it for your own explorations.\n‚Ä¶and try to enjoy the process :-) ‚Äî R is extremely powerful, and there is rarely a limit in what can be done in it with your data. Let‚Äôs go!",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>About this book</span>"
    ]
  },
  {
    "objectID": "tidyverse_vs_baser.html",
    "href": "tidyverse_vs_baser.html",
    "title": "2¬† Tidyverse vs base R",
    "section": "",
    "text": "This book is almost entirely written with the tidyverse dialect of R in mind, using RStudio as an integrated development environment (IDE). Base R is only mentioned when we get to square brackets‚Äô indexing of lists in the advanced chapters on functions and loops (which we do not teach until the final year). Many of the plotting options described in the R Graphics Cookbook textbook also use base R (in addition to ggplot).\nThe reason for our preference for tidyverse is that we consider tidyverse to be easier for beginners to grasp. 99% of what we need to do in the year is available through tidyverse. tidyverse packages have better help sources available online and they are consistent: operating on data frames with a relatively small number of usefully-named functions makes it easier to climb the learning curve.\n\n\n\n\n\n\nRecommended reading\n\n\n\nWe highly recommend reading the following sources to understand the base R vs.¬†tidyverse story:\n\nFor the historical overview, read (or watch) Roger Penn‚Äôs Teaching R to New Users - From tapply to the Tidyverse.\nDavid Robinson‚Äôs Teach the tidyverse to beginners post that first inspired Jarek to switch to tidyverse after a year of teaching base R + ggplot.\nNot everyone agrees that tidyverse is better, or is better for teaching R, and the two recent contrarian views come from Norm Matloff (Teaching R in a Kinder, Gentler, More Effective Manner) and Robert M√ºnchen (Why R is Hard to Learn).",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Tidyverse vs base R</span>"
    ]
  },
  {
    "objectID": "llms.html",
    "href": "llms.html",
    "title": "3¬† Note on the LLMs",
    "section": "",
    "text": "We are aware of the 800-pound Gorilla gorilla gorilla in the room: we live in times where any basic programming task can be effectively (if not efficiently or exactly correctly) completed by a large language model. We refrain from the moral judgment on LLMs in our classes; it is a fact of life that students use LLM whether we like it or not, whether it is useful or not, or whether it is ethical to do so (see the analysis of recent survey of ChatGPT users).\nHowever, in order to use LLMs effectively, students must understand what they are doing, which is not the case for the majority in the first few weeks of learning coding. Without understanding of why and how things work, students are unable to judge the LLM‚Äôs output; even when they copy-paste the code and it works, they will not be able to solve a similar or related task next time.\nThis phenomenon - that LLMs are useful only if you already have a good idea what you need to do - is discussed well by prof. Ethan Mollick in his post 15 Times to use AI, and 5 Not to. His final paragraph (emphasis mine):\n\nKnowing when to use AI turns out to be a form of wisdom, not just technical knowledge. Like most wisdom, it‚Äôs somewhat paradoxical: AI is often most useful where we‚Äôre already expert enough to spot its mistakes, yet least helpful in the deep work that made us experts in the first place. It works best for tasks we could do ourselves but shouldn‚Äôt waste time on, yet can actively harm our learning when we use it to skip necessary struggles.\n\nWe do not directly teach the use of LLMs for coding, as we consider the purpose of the classes to be to acquire fundamental competencies in programmatic data analysis, which students must be able to do without code producers like LLMs. But the LLMs can be good tutors for students learning to code on their own, and with that view in mind, we highly recommend the AI TutoR textbook, which guides learners to be more proficient users of LLMs, particularly in coding-related tasks.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Note on the LLMs</span>"
    ]
  },
  {
    "objectID": "how_to_contribute.html",
    "href": "how_to_contribute.html",
    "title": "4¬† Improving this book",
    "section": "",
    "text": "4.1 Openning an issue\nThis book is open source. It is published under a MIT License so you may use its contents however you like (we would appreciate if you let us know if you do)!). It also means anyone can suggest improvements or fix mistakes.\nWe would be very happy if you let us know about errors that that you spotted, or if you have suggestions to improve or expand the book. You do not need to be an expert in programming to contribute and you cannot break the book by doing so ‚Äî even spotting a missing word or pointing out a confusing explanation will be helpful to us!\nThere are two main ways to contribute:\nThis is like leaving a note online. For example: There‚Äôs a typo in Part 2, Chapter 3 or I found the explanation of loops unclear. Issues are the simplest way to give us feedback and they can be opened here by clicking the green button ‚ÄúNew issue‚Äù on the right. Or you can click ‚ÄúReport an issue‚Äù on any page of this book.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Improving this book</span>"
    ]
  },
  {
    "objectID": "how_to_contribute.html#submitting-a-pull-request-pr",
    "href": "how_to_contribute.html#submitting-a-pull-request-pr",
    "title": "4¬† Improving this book",
    "section": "4.2 Submitting a pull request (PR)",
    "text": "4.2 Submitting a pull request (PR)\nThis is a way to propose an actual edit of any piece of content in the book (for example, fixing the typo directly, rephrasing a paragraph, etc.). This requires a few extra steps but can all be accomplished in the browser and we can then apply the fix more easily). The steps to submit your proposed changes to be consider by the book‚Äôs editor (i.e.¬†Jarek) are as follows:\n\nGo to the page for this book‚Äôs files: https://github.com/jarekbryk/huddr or click the ‚Äúedit this page‚Äù button at the bottom of each page.\nFind the file that you want to modify (for example, a basic_functions.qmd file) and click it.\nOn the file page, click the pencil icon to edit the file in the browser.\nMake your change in the editor (fix the text, add a link, etc.).\nScroll down to ‚ÄúPropose changes‚Äù and write a short message like ‚ÄúFix typo in the filter function‚Äù.\nClick ‚ÄúPropose changes‚Äù. GitHub will show you a page with a button ‚ÄúCreate pull request‚Äù ‚Äî click it.\nAdd a short title/description (why this improves the book) and click ‚ÄúCreate pull request.‚Äù\n\nThe editor will consider your suggestions and may incorporate them in the text - you will get a notification when this happens.\n\n\n\n\n\n\nLearn more\n\n\n\nIf you want to read a bit more about pull request and version control (fundamental components of modern software development), and other features of Git and GitHub, this guide is relatively accessible: Using GitHub without the command line.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Improving this book</span>"
    ]
  },
  {
    "objectID": "how_to_use_a_computer.html",
    "href": "how_to_use_a_computer.html",
    "title": "5¬† How to use a computer",
    "section": "",
    "text": "5.1 OneDrive vs hard drive\nIn our experience, one of the biggest barriers to learning programming for students today is not the complexity of coding itself, but rather the lack of fundamental computer skills. Many students struggle with operating a computer, which makes learning the hard stuff (data science and programming in R) even trickier.\nFrom a teaching perspective, a very useful reading in this context is this 30 year-old text (!) by Phil Agre: How to Help Someone Use a Computer. All of his recommendations are still valid today (! again).\nBelow is the list with explanations of the common challenges and solutions to modify various settings in the operating system to minimise confusion. We hope you will find them useful.\nMicrosoft‚Äôs cloud storage system OneDrive is the default on all university computers. When you log in to your account on a university computer, your ‚Äúhome‚Äù folder is located on OneDrive. This has an important advantage: by saving your files there you will be able to access them from any computer that is connected to the internet. So you can continue working on the same files on your home computer after the class, and you don‚Äôt have to copy files back and forth (or email them to yourself). Another advantage of this setup is backup: OneDrive files are backed up by Microsoft; but, really, you should treat it only as secondary backup and protect your files independently (e.g.¬†by regularly coping them to another disk, or another cloud storage system).\n‚ÄúHard drive‚Äù (a.k.a. Hard Drisk Drive, or HDD) is a physical data storage device in a computer. They were once semi-mechanical devices with small disks spinning at a very high speed, and data read off them using magnets. Now they are most often base on flash memory and have no moving parts: they are called ‚ÄúSSD‚Äù (‚ÄúSolid State Drive‚Äù) and you can find them in every kind of electronic device.\nTo be clear: computers in the classroom and computers that manage OneDrive system in the cloud all use some form of data storage (HDD and/or SDD). The difference between OneDrive and hard drive is only in the place where the main storage device is located.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>How to use a computer</span>"
    ]
  },
  {
    "objectID": "how_to_use_a_computer.html#onedrive-vs-hard-drive",
    "href": "how_to_use_a_computer.html#onedrive-vs-hard-drive",
    "title": "5¬† How to use a computer",
    "section": "",
    "text": "But what is ‚Äúcloud‚Äù anyway?\n\n\n\n\n\n‚ÄúCloud‚Äù is an unfortunate name, as nothing that it stands for is related to clouds (except maybe the general fuzziness of the term). By using the name ‚Äúcloud‚Äù we simply mean that the data (files, folders etc.) that you see on a computer in front of you is not actually stored on that computer. Instead, it is regularly copied (‚Äúsynced‚Äù) to computers physically located elsewhere (often in massive data centres all around the world). Think about a Netflix film that you may be watching on your phone: the film is not stored on your phone‚Äôs SSD unless you had downloaded it. It is being streamed from a HDD or SSD no a computer ‚Äúin the cloud‚Äù somewhere (actually on a set of disks in a massive warehouse somewhere) almost in real time.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>How to use a computer</span>"
    ]
  },
  {
    "objectID": "how_to_use_a_computer.html#file-explorer-folders-and-files",
    "href": "how_to_use_a_computer.html#file-explorer-folders-and-files",
    "title": "5¬† How to use a computer",
    "section": "5.2 File Explorer, folders and files",
    "text": "5.2 File Explorer, folders and files\n\n\n\n\n\n\nTip\n\n\n\nAll images on this page can be clicked to be enlarged.\n\n\nFile Explorer allows you to see all the files saved to your computer stored in different folders (also known as directories) like Downloads or Desktop, whether locally or in the cloud. There is a search bar in the top right hand corner which allows you to search for a document or folder by name.\n\nA folder is depicted by a folder icon next to the name of the folder, and it is cleverly called ‚ÄúFile folder‚Äù in the ‚ÄúType‚Äù column.\n\nA file is depicted by an icon of the programme associated with it (see section 5.3 below). The type of file is also specified in the ‚ÄúType‚Äù column - in this case, a Microsoft Excel workbook titled ‚ÄúBook1‚Äù and a Microsoft Word Document titled ‚ÄúEssay plan‚Äù.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>How to use a computer</span>"
    ]
  },
  {
    "objectID": "how_to_use_a_computer.html#file-extensions",
    "href": "how_to_use_a_computer.html#file-extensions",
    "title": "5¬† How to use a computer",
    "section": "5.3 File extensions",
    "text": "5.3 File extensions\nMany operating systems use file extensions as indicators of what kind of file type a file is. For example, text files have an extension ‚Äútxt‚Äù, Excel files have an extension ‚Äúxlsx‚Äù, and so on. Operating systems will often make an educated guess about which programme opens which file, using the extension as a hint, so that ‚Äúeml‚Äù files are opened by Outlook, for example (or another mail client).\nThere are two common problems with the file extension system: 1) MS Windows by default hides file extensions (as you can see in the image in the above section) and 2) multiple programmes can use the same file type (both features make this system vulnerable to spoofing for nefarious purposes).\nOn a minority of university computers, *.Rmd and *.qmd files that are used by RStudio to open R files are also used by Endnote (a reference manager), which takes a precedence over RStudio. Endnote has no idea how to use RStudio‚Äôs files, and its unsuccessful attempts to open them get annoying very quickly.\n\n5.3.1 To enable visibility of file extensions\n\nOpen File Explorer (Win + E).\nIn the top toolbar, click View ‚Üí Show.\nTick ‚úÖ ‚ÄúFile name extensions‚Äù.\n\n\n\n\n5.3.2 To specify which programme should open Rmd/qmd files\n\nIn the File Explorer, right-click the file you want to associate with a programme (e.g.¬†week1_code.qmd).\nChoose Open with ‚Üí Choose another app.\nSelect the program you want (e.g.¬†RStudio).\nClick Always at the bottom.\nIf necessary (rarely), repeat this process for every file extension that you want to associate with a new programme.\n\n(Note that on the gif below my qmd files are already associated with RStudio, as I have no Endnote on my computer.)\n\n\n\n5.3.3 Paths and hierarchies\nTo know where your file is in the computer (regardless of whether it is local or in the cloud), operating systems use paths that indicate location of files in a (mostly) hierarchical way. You can always view the whole path of each file or folder in the address bar of File Explorer:\n\nYou can also copy the path to your file or folder by copying the text in the address bar, or by right-clicking the file or folder name and selecting ‚ÄúCopy as a path (Ctrl-Shift-C)‚Äù. Similarly, you can type a path to a folder in the address bar and the File Explorer will take you there.\nIn Windows, different levels of folder hierarchy are separated by backslash (\\), so if you wanted to get to a ‚Äútest_project‚Äù folder located in the folder ‚ÄúDocuments‚Äù, you would type Documents\\test_project in the File Explorer‚Äôs address bar. Note that there are some folders ‚Äúabove‚Äù the Documents that Windows hides from you by default, so if you click the address bar, the full path would be something like C:\\Users\\Jarek\\Documents\\test_project.\nC drive is very commonly the top level position in the Windows‚Äô system‚Äôs hierarchy, unless you are on OneDrive, in which case OneDrive will be the top level folder and there will be no C drive level at all (as in the screenshot above).\n\n\n\n\n\n\n\nWhere is my file?\n\n\n\nThe path always uniquely identifies each file in your computer. If you don‚Äôt know where a given file or folder is, click the address bar in File Explorer and the full path to the file/folder will be revealed.\n\n\n\n\n5.3.4 How to unzip a file/folder\nTo make large files easier to transfer (and save storage space) we can compress them (or ‚Äúzip‚Äù them, so called after one of the most common file formats that support data compression/uncompression. These files will need to be uncompressed (‚Äúunzipped‚Äù) before the content inside could be used.\nUnzipping a file takes two steps:\n\nDouble click the zip file. By default, File Explorer will show you the contents of the archive, but it will not be unzipped yet.\nClick the ‚ÄúExtract all‚Äù button above right and and specify the destination for the unzipped file. It is a good practice to remove the last level of the path that Windows proposes to unzip the file to (e.g.¬†if Windows proposes to unzip the file to Downloads\\test, change it to Downloads\\). This will avoid nesting of folders with the same name.\n\n\n\n\n5.3.5 How to move/copy files from one folder to another\nIn the class, you will often be downloading files from Brightspace or the internet to open them in RStudio. In order to make working with these files in your RStudio easier, you should move these files to an apropriate place in your RStudio project folder (e.g.¬†code or data). There are four ways of accomplishing this:\nMethod 1: Keyboard shortcuts (recommended)\n\nSelect the file/folder. You can select multiple files/folder if you cold Ctrl key while selecting.\nPress Ctrl+C (copy) or Ctrl+X (cut = move).\nGo to the new location in File Explorer.\nPress Ctrl+V to paste.\n\nMethod 2: Right-click menu\n\nRight-click the file/folder.\nChoose Copy (to copy) or Cut (to move).\nNavigate to the new location.\nRight-click in empty space and choose Paste.\n\nMethod 3: Interface buttons\n\nSelect file/folder. You can select multiple files/folder if you cold Ctrl key while selecting.\nClick the copy icon to copy or scissors to cut (move).\nNavigate to the new location.\nClick the Paste icon.\n\n\nMethod 4: Drag and drop\n\nOpen two windows of File Explorer (Win + E), one for the source of the file/folder, the other for the destination.\nFind the file or folder you want to move or copy.\nDrag it with the mouse to the new location. If the new location is on the same drive, dragging will move it. If the new location is on a different drive (e.g.¬†C: ‚Üí USB stick), dragging will copy it. You can hold Ctrl key while dragging to enforce copy, or hold Shift key while dragging to enforce moving.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>How to use a computer</span>"
    ]
  },
  {
    "objectID": "how_to_use_a_computer.html#you-are-good-to-go",
    "href": "how_to_use_a_computer.html#you-are-good-to-go",
    "title": "5¬† How to use a computer",
    "section": "5.4 You are good to go!",
    "text": "5.4 You are good to go!",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>How to use a computer</span>"
    ]
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "6¬† Installing R and RStudio on your computer",
    "section": "",
    "text": "6.1 Installation instructions\nThis step-by-step guide will show you how to install R and R Studio on your personal computer.\nIf you are not familiar with concepts of cloud, file and folder paths and unzipping archived files on your computer, please read the chapter How to use a computer first.\nFor your computer to be ready for the installation of R and RStudio, you need to install RTools first (if you are on Windows) or Command Line Tools (if you are on macOS). Please proceed through these instructions in order.\nOnce you have successfully installed RTools, R and RStudio on your computer, go to the next section Setting up R and RStudio",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Installing R and RStudio on your computer</span>"
    ]
  },
  {
    "objectID": "installation.html#installation-instructions",
    "href": "installation.html#installation-instructions",
    "title": "6¬† Installing R and RStudio on your computer",
    "section": "",
    "text": "For WindowsFor macOS\n\n\n\n6.1.1 Download and install RTools\nInstructions are available at https://cran.r-project.org/bin/windows/Rtools/. Remember to download the latest version of RTools.\n\n\n6.1.2 Download and install R\nUse this link to download and install R: https://www.stats.bris.ac.uk/R/bin/windows/base/\n\n\n6.1.3 Download and install RStudio\nUse this link: https://posit.co/download/rstudio-desktop/ and click on the button ‚ÄúInstall RStudio‚Äù.\n\n\n\n\n6.1.4 Download and install Command Line Tools\n\nOpen the Terminal app on your Mac.\nCopy and paste (or type) the following command: xcode-select --install, then press ‚ÄúEnter‚Äù.\nFollow the instructions. Note that the download may take a while, as it is a large file.\n\n\n\n6.1.5 Download and install R\nUse this link to download and install R: https://www.stats.bris.ac.uk/R/bin/macosx/base/\n\n\n6.1.6 Download and install RStudio\nUse this link: https://posit.co/download/rstudio-desktop/. Click on the button ‚ÄúInstall RStudio‚Äù.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Installing R and RStudio on your computer</span>"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "7¬† Setting up RStudio",
    "section": "",
    "text": "7.1 Set up RStudio project structure\nOnce R and RStudio are installed, go through the following steps to prepare them for work on the module. But before you begin, make sure about these things:",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Setting up RStudio</span>"
    ]
  },
  {
    "objectID": "setup.html#set-up-rstudio-project-structure",
    "href": "setup.html#set-up-rstudio-project-structure",
    "title": "7¬† Setting up RStudio",
    "section": "",
    "text": "Open RStudio.\nSelect File ‚Üí New Project located on the top left of the screen and then, in the window that appears, select New Directory, then again select New Project.\nIn the form that appears, under Directory name:, give your project directory a useful name (I recommend format modulecode_year, e.g.¬†SIB2001_2425), and under Create a project under subdirectory of: select your university OneDrive folder (OneDrive - University of Huddersfield) (note that it is not on the gif above). Then click Create Project. RStudio will create your project folder and refresh the main window.\nIn the RStudio bottom-right panel, click New Folder and create the first folder; name it code. Repeat this step twice more to add folders: data and output.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Setting up RStudio</span>"
    ]
  },
  {
    "objectID": "setup.html#adjust-rstudio-interface",
    "href": "setup.html#adjust-rstudio-interface",
    "title": "7¬† Setting up RStudio",
    "section": "7.2 Adjust RStudio interface",
    "text": "7.2 Adjust RStudio interface\n\n\nSelect menu Tools ‚Üí Global Options and then ‚ùé uncheck option Restore .RData into workspace at startup and set Save workspace to .RData on exit to Never.\nSelect the section Code on the left side of the window and select the option Use native pipe operator\nConfirm by clicking OK (in the bottom right corder of the window)",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Setting up RStudio</span>"
    ]
  },
  {
    "objectID": "setup.html#open-rstudio-project",
    "href": "setup.html#open-rstudio-project",
    "title": "7¬† Setting up RStudio",
    "section": "7.3 Open RStudio project",
    "text": "7.3 Open RStudio project\n\n\n\n\n\n\nAre you in the right project folder?\n\n\n\nAlways make sure that your RStudio uses the correct project folder. Some of the important functions that we use throughout the class assume that you are working in your project and break if you don‚Äôt.\n\n\nNow, every time RStudio starts, it should open the project folder you had set up last (you may have noticed a setting for this behaviour in Tools ‚Üí Global options). The project folder name (e.g.¬†SIB2001_2526) should be in the top right corner of the RStudio window and in the menu bar at the top left. If it isn‚Äôt (when it says: Project: None), you must open your project before you do anything else. There are two ways to do it:\n\nGo to File ‚Üí Recent Projects, and click the project name. RStudio window will refresh and open your project.\nAlternatively, go to File Explorer and find your project folder there. Then double click your project file Rproj file (e.g.¬†SIB2001_2526.Rproj). RStudio will open your project. Make sure that only the correct RStudio window is opened, and close any other RStudio windows.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Setting up RStudio</span>"
    ]
  },
  {
    "objectID": "setup.html#thats-it",
    "href": "setup.html#thats-it",
    "title": "7¬† Setting up RStudio",
    "section": "7.4 That‚Äôs it!",
    "text": "7.4 That‚Äôs it!\nYou can now follow all the code from the class and in the other resources mentioned on Brightspace.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Setting up RStudio</span>"
    ]
  },
  {
    "objectID": "posit_cloud.html",
    "href": "posit_cloud.html",
    "title": "8¬† Using RStudio in a web browser",
    "section": "",
    "text": "8.1 posit.cloud\nIf you cannot install R and RStudio on your computer, if your computer is a Chromebook or a tablet, or if you want to practice but don‚Äôt have your computer with you, the company that makes RStudio also makes a cloud version of it, available for free at https://posit.cloud/. You need to sign up for a free account (allowing you to use it for 25 hours per month for free) and you will be able to run RStudio in a web browser (any web browser, on any computer) without the need to install RTools, Command Line Tools, R or RStudio.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Using RStudio in a web browser</span>"
    ]
  },
  {
    "objectID": "posit_cloud.html#sign-up-for-an-account",
    "href": "posit_cloud.html#sign-up-for-an-account",
    "title": "8¬† Using RStudio in a web browser",
    "section": "8.2 Sign up for an account",
    "text": "8.2 Sign up for an account\n\nFollow the link https://posit.cloud/.\nGet started.\nChoose a plan (there is a free option).\nSign up with your university email address.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Using RStudio in a web browser</span>"
    ]
  },
  {
    "objectID": "posit_cloud.html#set-up-rstudio-project-structure",
    "href": "posit_cloud.html#set-up-rstudio-project-structure",
    "title": "8¬† Using RStudio in a web browser",
    "section": "8.3 Set up RStudio project structure",
    "text": "8.3 Set up RStudio project structure\nOnce you sign up and the rstudio.cloud opens in the browser, click ‚ÄúNew Project‚Äù on the right and enter a new name for it (I recommend modulecode_year, e.g.¬†SIB2001_2526). In the panel Files on the bottom-right, click New Folder button and create three folders: code, data and output. Finally, in the panel on the left or bottom-left (called ‚ÄúConsole‚Äù), copy-paste the following code and press Enter: install.packages(c(\"tidyverse\", \"here\", \"rstatix\", \"janitor\", \"datapasta\",  \"palmerpenguins\")).\nIt will take up to several minutes for all the packages to be downloaded and installed. You may be asked a question during the installation, to which you should agree. There will be a lot of red text scrolling through the window, but this is all normal. Any actual errors will terminate the installation. When the installation is over, you are ready: you can now follow all the code we do in the class and in the other resources on Brightspace.",
    "crumbs": [
      "Part 2: Preparations",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Using RStudio in a web browser</span>"
    ]
  },
  {
    "objectID": "loading_packages_and_data.html",
    "href": "loading_packages_and_data.html",
    "title": "9¬† Loading and Installing Packages",
    "section": "",
    "text": "9.1 1. Loading and Installing Packages\nThe first step after you create a document in R should always be loading all the required packages (and installing them if needed).\ninstall.packages(\"rstatix\")\nOnce you have installed a package it will not be immediately available for you to use, but you‚Äôll have to load it by using the library() function as in the example below:\nlibrary(tidyverse)\nlibrary(here)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Loading and Installing Packages</span>"
    ]
  },
  {
    "objectID": "loading_packages_and_data.html#loading-and-installing-packages",
    "href": "loading_packages_and_data.html#loading-and-installing-packages",
    "title": "9¬† Loading and Installing Packages",
    "section": "",
    "text": "What is a package? You should think of a package as a collection of functions, data and help files that you can download and install in R.\nYou can do this by using the function install.packages() and always remember to put the name of the package in quotation marks as in the example below:\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAlways start a quarto document by loading tidyverse and here",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Loading and Installing Packages</span>"
    ]
  },
  {
    "objectID": "loading_packages_and_data.html#loading-your-data",
    "href": "loading_packages_and_data.html#loading-your-data",
    "title": "9¬† Loading and Installing Packages",
    "section": "9.2 2. Loading your data",
    "text": "9.2 2. Loading your data\nThe second step should be to load your data into R (otherwise you‚Äôll have nothing to work with). To do this you first have to check what type of file your data set is (is it .txt, .csv, .xlsx?). Depending on the type of file you have is the function that you are going to use:\n\n\nread_csv() reads comma separated files\nread_csv2() reads semicolon separated files\nread_tsv() reads tab separated files\nread_xlsx reads excel files (for this function you‚Äôll need to load library(readxl))\nread_delim() reads files with any delimiter\n\n\nNow that you know which function to use, you‚Äôll have to follow three easy steps to load your data set:\n\nName the data and input an arrow signing to the data &lt;-\nUse the relevant function for your file type\nUse function here to tell R where you file is saved and what‚Äôs the name (Remember to always save you file in the data folder!)\n\nHere‚Äôs and example for you:\n\nrodents &lt;- read_tsv(here(\"data\", \"rodents_full.txt\"))\n\nIf you want to use read_delim() you‚Äôll need to specify what delimiter you want to use (e.g.¬†delim = ‚Äú;‚Äù)\n\nsquirrels &lt;- read_delim (here(\"data\", \"squirrels.csv\"), delim = \";\")\nsquirrels",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Loading and Installing Packages</span>"
    ]
  },
  {
    "objectID": "dealing_with_missing_data.html",
    "href": "dealing_with_missing_data.html",
    "title": "10¬† Deadling with missing data",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Deadling with missing data</span>"
    ]
  },
  {
    "objectID": "basic_functions.html",
    "href": "basic_functions.html",
    "title": "11¬† Basic R functions",
    "section": "",
    "text": "11.1 Joining functions\nIn this short chapter you will find a summary of some of the basic and most useful functions and operators from the tidyverse package that you will be using in R studio. If you want to learn a bit more about a specific function from this chapter simply click on the function, and it will take you to a page with additional information.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Basic R functions</span>"
    ]
  },
  {
    "objectID": "basic_functions.html#joining-functions",
    "href": "basic_functions.html#joining-functions",
    "title": "11¬† Basic R functions",
    "section": "",
    "text": "Functions\n\n\n\n\nleft_join()- Keeps all the values from the left table and matching rows from the right table.\nright_join()- Keeps all the values from the right table and matching rows from the left table.\ninner_join()- Keeps all values that have matching keys in both tables.\nfull_join()- Keeps all values from both tables.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Basic R functions</span>"
    ]
  },
  {
    "objectID": "basic_functions.html#pivot-functions",
    "href": "basic_functions.html#pivot-functions",
    "title": "11¬† Basic R functions",
    "section": "11.2 Pivot functions",
    "text": "11.2 Pivot functions\n\n\n\n\n\n\nFunctions\n\n\n\n\npivot_longer()- Allows you to lengthen your data set from a wide format to a long format by reducing the number of columns and increasing the number of rows.\npivot_wider()- Allows you to widen your data set from a long format to a wide format by reducing the number of rows and increasing the number of columns.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Basic R functions</span>"
    ]
  },
  {
    "objectID": "basic_functions.html#useful-operators",
    "href": "basic_functions.html#useful-operators",
    "title": "11¬† Basic R functions",
    "section": "11.3 Useful operators",
    "text": "11.3 Useful operators\n|&gt; or %\\&gt;%\n\n\n\n\n\n\n\nThis is a pipe operator that allows you to apply multiple functions to your data set in a chain like sequence.\nYou can type this operator by pressing: shift + control + M\n\n\n\n\nHere you can see an example of how to use the pipe operator to chain different functions:\n\nrodents |&gt; \n  filter(species_id==\"NL\") |&gt; \n  select(species_id, hindfoot_length, sex)\n\n%in%\n\n\n\n\n\n\n\nThis is a logical operator that allows you to check if an element from one vector is present in another vector.\n\n\n\n\n!\n\n\n\n\n\n\n\nThis is a negation operator, which allows you to tell a function to do the opposite.\n\n\n\n\nThis is an example of how you can oppose the filter() in order to filter out variables:\n\nrodents |&gt; \n  filter(!species_id==\"NL\")\n\n+, -, log(), *, /\n\n\n\n\n\n\n\nThese are all mathematical operators.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Basic R functions</span>"
    ]
  },
  {
    "objectID": "basic_functions.html#data-overview-functions",
    "href": "basic_functions.html#data-overview-functions",
    "title": "11¬† Basic R functions",
    "section": "11.4 Data overview functions",
    "text": "11.4 Data overview functions\n\n\n\n\n\n\nFunctions\n\n\n\n\nclass() - It provides just the class of the specified object.\nstr() - It shows you the type of content in each column.\nglipmse() - While still detailed, it is easier to glance through than str().",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Basic R functions</span>"
    ]
  },
  {
    "objectID": "basic_functions.html#graph-functions",
    "href": "basic_functions.html#graph-functions",
    "title": "11¬† Basic R functions",
    "section": "11.5 Graph functions",
    "text": "11.5 Graph functions\nggplot() is the function that will allow you to plot your datasets.\nNow, in order to get a plot you should think about three main components:\n\nData + Aesthetics + Geometry\n\n\n\n\n\n\n\n\nData is a data frame you want to use (you can write it inside the ggplot() function of you can directly pipe ggplot() from your dataset.\nAesthetics is used to indicate x and y variables and it can also be used to control the color of the plot.\n\naes()\n\nGeometry refers totype of plot you want to make:\n\ngeom_boxplot()\ngeom_point()\ngeom_line()\ngeom_col()\ngeom_histogram()\ngeom_jitter()\ngeom_bar()\n\n\n\n\n\nHere you can see two examples of how to do a plot (one with pipe operator and one without):\n\nggplot(rodents) + aes(x= species_id, y=hindfoot_length) + geom_boxplot()\n\n\n\n\n\n\n\nrodents |&gt; \n  ggplot() + aes(x= species_id, y=hindfoot_length) + geom_boxplot()\n\n\n\n\n\n\n\n\n\n11.5.1 Further Graph functions\n\n\n\n\n\n\nFunctions\n\n\n\n\nfacet_wrap() - Allows for the visualization of individual categories in their own graph.\nlabs() - Change axis labels and legend titles.\nscale_x_continous() / scale_y_continous() - default scales for continuous x and y aesthetics, which can be transform these axes.\ntheme() - Modify a single plot‚Äôs theme.\ntheme_update() - Modify the active theme, to affect all subsequent plots.\ntheme_minimal() - Applies a simplified theme of the plot, with no background shading.\nview() - Allows you to display your data.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Basic R functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html",
    "href": "basic_functions_extended.html",
    "title": "12¬† A bit more about basic functions",
    "section": "",
    "text": "12.1 Filter\nThe filter() function allows you to pick rows in a data set. To use this function you simply need to specify the requirement/condition by which you want to filter your data.\nIn this example you can see both ways to use the filter() function in a data set:\n# Filter rodents data set for variables that are of the NL species.\nfilter(rodents, species_id==\"NL\")\n\nrodents |&gt; \n  filter(species_id==\"NL\")",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#filter",
    "href": "basic_functions_extended.html#filter",
    "title": "12¬† A bit more about basic functions",
    "section": "",
    "text": "You do this by writing:\n\n\n\nfilter(data set name, column name == condition you want to filter)\n\n\n\n\n\n12.1.1 Useful filter functions and parameters\n\n\nis.na() - Allows you to check for missing values.\nc() - Allows you to combine different filtering variables.\nna.rm = TRUE - This parameter instructs functions to ignore missing values.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#select",
    "href": "basic_functions_extended.html#select",
    "title": "12¬† A bit more about basic functions",
    "section": "12.2 Select",
    "text": "12.2 Select\nThe select() function allows you to pick/keep specific columns from a data set.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nselect(data set name, column name/s)\n\n\nIn this example you can see both ways to use the select() function in a data set:\n\n# Select the species_id column from the rodents data set.\nselect(rodents, species_id)\n\nrodents |&gt; \n  select(species_id)\n\n\n12.2.1 Useful select functions\n\n\nc() - Allows you to combine different selections.\nstarts_with() - Allows you to select variables that start with a specific prefix.\nends_with() - Allows you to select variables that end with a specific suffix\ncontains() - Allows you to select variables that contain a specific string.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#count",
    "href": "basic_functions_extended.html#count",
    "title": "12¬† A bit more about basic functions",
    "section": "12.3 Count",
    "text": "12.3 Count\nThe count() function counts the number of occurrences of all distinct elements in a column.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\ncount(data set name, column name)\n\n\nIn this example you can see both ways to use the count() function in a data set:\n\n# Select the species_id column from the rodents data set.\ncount(rodents, species_id)\n\nrodents |&gt; \n  count(species_id)\n\n\n12.3.1 Useful count parameters and functions\n\n\nsort = TRUE/FALSE - This parameters dictates the order in which the variables will be arranged, TRUE will order the counts in a descending order, wile FALSE will order the counts in an ascending order.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#mutate",
    "href": "basic_functions_extended.html#mutate",
    "title": "12¬† A bit more about basic functions",
    "section": "12.4 Mutate",
    "text": "12.4 Mutate\nThe mutate() function allows you to create and modify columns from a data set. - It can create new columns as functions of existing variables.\n\nIt can modify existing columns.\nIt can delete columns by setting them to NULL.\n\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nmutate(data set name, new/existing column name = function/expression)\n\n\n\n12.4.1 Useful mutate functions\n\n\n+, -, log(), *, / - Mathematical opperators\nifelse() - This function will return one value if a condition is TRUE and another if FALSE.\ncase_when() - This function allows you to evaluate multiple conditions and assign them individual values.\n\n\nIn this examples you can see different ways you can use the mutate() function in a data set:\n\n# Use mutate to create a new column that will show a 1 for females and a 2 for males\nrodents |&gt; \n  mutate(new_column = case_when(sex == \"F\" ~ 1, sex == \"M\" ~ 2))\n\n# Use mutate to create a new weight_kg column that converts the values on the weight column (in grams) into kilograms by dividing them\nrodents |&gt; \n  mutate(wight_kg=weight/1000)\n\n# Use mutate to set the delete the hindfoot_length column\nrodents |&gt; \n  mutate(hindfoot_length = NULL)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#arrange",
    "href": "basic_functions_extended.html#arrange",
    "title": "12¬† A bit more about basic functions",
    "section": "12.5 Arrange",
    "text": "12.5 Arrange\nThe arrange() function allows for the ordering of the data by different variables. - If you input multiple columns they will be sorted hierarchically.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\narrange(data set name, column name/s)\n\n\nIn this example you can see both ways to use the arrange() function in a data set:\n\n#Arrange the rows so that they sorted by species_id (ascending) and then by sex (ascending) \narrange(rodents, species_id, sex)\n\nrodents |&gt; \n  arrange(species_id, sex)\n\n\n12.5.1 Useful arrange functions\n\ndesc() - Allows you to sort in descending order as the default order of the arrange() funcrion is ascending.\n\n\nrodents |&gt; \n  arrange(desc(year))",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#group_by",
    "href": "basic_functions_extended.html#group_by",
    "title": "12¬† A bit more about basic functions",
    "section": "12.6 Group_by",
    "text": "12.6 Group_by\nThe group_by() function uses an existing table to form a grouped table by splitting the data sate based on one or more variables.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\ngroup_by(data set name, column name/s)\n\n\nIn this example you can see both ways to use the group_by() function in a data set:\n\n# Group the data set by species_id\ngroup_by(rodents, species_id)\n\nrodents |&gt; \n  group_by(species_id)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#summarise",
    "href": "basic_functions_extended.html#summarise",
    "title": "12¬† A bit more about basic functions",
    "section": "12.7 Summarise",
    "text": "12.7 Summarise\nThe summarise() function allows you to calculate summary statistics and is usually used on grouped data produced by group_by(), as it creates one row for each combination of grouping variables.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nsummarise(data set name, new column name = function(column name))\n\n\n\n12.7.1 Useful summary functions and parameters\n\nmean()\nmedian()\nsd()\nmin()\nmax()\nn()\nn_distinct()\nna.rm = TRUE - This parameter instructs functions to ignore missing values.\n\nIn this example you can see both ways to use the summarise() function in a data set:\n\n# Take the mean hindfoot length\nsummarise(rodents, mean_hindfoot_length = mean(hindfoot_length, na.rm = TRUE))\n\nrodents |&gt; \n  summarise(mean_hindfoot_length = mean(hindfoot_length, na.rm = TRUE))",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#tibble",
    "href": "basic_functions_extended.html#tibble",
    "title": "12¬† A bit more about basic functions",
    "section": "12.8 Tibble",
    "text": "12.8 Tibble\nThe tibble() function allows you to create new data frames.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\ntibble(data set name, column name 1 = variables, comuln name 2 = variables, ‚Ä¶)\n\n\n\n12.8.1 Useful tibble functions\n\n\nc() - Allows you to combine different selections.\n\n\n\ntibble(\n  Teams = c(\"Blue\", \"Red\", \"Purple\"),\n  Score = c(100, 85, 99))\n\n# A tibble: 3 √ó 2\n  Teams  Score\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Blue     100\n2 Red       85\n3 Purple    99",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "basic_functions_extended.html#drop_na",
    "href": "basic_functions_extended.html#drop_na",
    "title": "12¬† A bit more about basic functions",
    "section": "12.9 Drop_na",
    "text": "12.9 Drop_na\nThe drop_na() function allows you to to drop all the rows containing missing values.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\ndrop_na(data set name, column name)\n\n\nIn this example you can see both ways to use the drop_na() function in a data set:\n\n# Drop all the variables that have missing values in the hindfoot length column\ndrop_na(rodents, hindfoot_length)\n\nrodents |&gt; \n  drop_na(hindfoot_length)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>A bit more about basic functions</span>"
    ]
  },
  {
    "objectID": "joining_functions_extended.html",
    "href": "joining_functions_extended.html",
    "title": "13¬† Joining functions",
    "section": "",
    "text": "The joining functions allow you to merge separate data sets based on matching keys.\n\nleft_join() - Keeps all the values from the left table and matching rows from the right table. All unmatched rows in the right table will be NA.\nright_join() - Keeps all the values from the right table and matching rows from the left table. All unmatched rows in the left table will be NA.\ninner_join() - Keeps all values that have matching keys in both tables.\nfull_join() - Keeps all values from both tables and all unmatched rows will be NA.\n\n\n13.0.1 Useful functions and parameters\n\n\nby - Specifies the key column/s to join on.\nc() - Allows you to combine different joining keys if they don‚Äôt have the same name.\n\n\n\n\n\n\n\n\nYou do this by writing:\n\n\n\njoining_function(left data set, right data set, by = ‚Äúcolumn name‚Äù)\njoining_function(left data set, right data set, by = c(left column name= right column name))\n\n\nHere you can see an example of how to join to data sets:\n\ninner_join(band_members, band_instruments, by = \"name\")\n\nleft_join(band_members, band_instruments, by = \"name\")\n\nright_join(band_members, band_instruments, by = \"name\")\n\nfull_join(band_members, band_instruments, by = \"name\")",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Joining functions</span>"
    ]
  },
  {
    "objectID": "pivot_functions_extended.html",
    "href": "pivot_functions_extended.html",
    "title": "14¬† Even more about pivot functions",
    "section": "",
    "text": "The pivot functions allow you to reshape your data sets, which is useful when preparing your data for analysis or visualization.\n\npivot_longer() - Allows you to lengthen your data set from a wide format to a long format by reducing the number of columns and increasing the number of rows.\npivot_wider() - Allows you to widen your data set from a long format to a wide format by reducing the number of rows and increasing the number of columns.\n\n\n\n\n\n\n\nYou do this by writing:\n\n\n\npivot_function(data set name, cols = (column name : column name), names_to = ‚Äúname‚Äù, values_to = ‚Äúvalue‚Äù)\n\n\n\ncols - The columns you want to pivot.\nnames_to - The new column name where you want all the variable names to go.\nvalues_to - The new column name where you want all the values to go.\n\nHere you can see an example of how you can use the pivot_longer() function in a data set:\n\npivot_longer(rodents, cols= (\"hindfoot_length\" : \"weight\"), names_to = \"type_measurement\", values_to = \"measurements\")\n\nrodents |&gt; \n  pivot_longer(cols= (\"hindfoot_length\" : \"weight\"), names_to = \"type_measurement\", values_to = \"measurements\")",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Even more about pivot functions</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html",
    "href": "basic_statistics.html",
    "title": "16¬† Descriptive statistics",
    "section": "",
    "text": "16.1 T-tests\nThe t_test() function allows you to performs one and two sample t-tests.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html#t-tests",
    "href": "basic_statistics.html#t-tests",
    "title": "16¬† Descriptive statistics",
    "section": "",
    "text": "You do this by writing:\n\n\n\nt_test(data set name, column name (numeric variable) ~ column name (grouping variable))\n\n\n\n16.1.1 Useful parameters\n\n\npaired = TRUE/FALSE - This parameter indicates whether you want a paired (TRUE) or unpaired (FALSE) test.\nvar.equal = TURE/FALSE - This parameter indicates whether you want to treat the two variances as equal using the pooled variance (TRUE), or to use the Welch (or Satterthwaite) method to approximate the degrees of freedom (FALSE).\nalternative = - This parameter specifies the alternative hypothesis and can be either \"two.sided\" (default), \"greater\" or \"less\".\nconf.level = - This parameter specifies the confidence level.\nmu = - This parameter specifies the null hypothesis mean against which to test your sample mean.\n\n\nHere you can see an example of how to perform different t-tests using the t_test() function with different parameters:\n\n# One-sample test\nrodents |&gt; \nt_test(weight~sex, mu = 0)\n\n# Two-samples unpaired test\nrodents |&gt; \nt_test(weight~sex)\n\n# Two-samples paired test\nrodents |&gt;  \nt_test(weight~sex, paired = TRUE)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html#shapiro-wilk-normality-test",
    "href": "basic_statistics.html#shapiro-wilk-normality-test",
    "title": "16¬† Descriptive statistics",
    "section": "16.2 Shapiro-Wilk Normality Test",
    "text": "16.2 Shapiro-Wilk Normality Test\nThe shapiro_test() function allows you to performs Shapiro-Wilk test of normality.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nshapiro_test(data set name, column names)\n\n\nHere you can see an example of how to use the shapiro_test() function:\n\n# One-sample test\nrodents |&gt; \nwilcox_test(weight~sex, mu = 0)\n\n# Two-samples unpaired test\nrodents |&gt; \nwilcox_test(weight~sex)\n\n# Two-samples paired test\nrodents |&gt;  \nwilcox_test(weight~sex, paired = TRUE)\n\n# Shapiro Wilk normality test for one variable\niris %&gt;% shapiro_test(Sepal.Length)\n\n# Shapiro Wilk normality test for two variables\niris %&gt;% shapiro_test(Sepal.Length, Petal.Width)\n\n# Multivariate normality test\nmshapiro_test(iris[, 1:3])",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html#wilcoxon-tests",
    "href": "basic_statistics.html#wilcoxon-tests",
    "title": "16¬† Descriptive statistics",
    "section": "16.3 Wilcoxon Tests",
    "text": "16.3 Wilcoxon Tests\nThe wilcox_test function allows you to perform one and two sample Wilcoxon tests.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nwilcox_test(data set name, column name (numeric variable) ~ column name (grouping variable))\n\n\n\n16.3.1 Useful parameters\n\n\npaired = TRUE/FALSE - This parameter indicates whether you want a paired (TRUE) or unpaired (FALSE) test.\nalternative = - This parameter specifies the alternative hypothesis and can be either \"two.sided\" (default), \"greater\" or \"less\".\nconf.level = - This parameter specifies the confidence level.\nmu = - This parameter specifies the null hypothesis mean against which to test your sample mean.\n\n\nHere you can see an example of how to use the wilcox_test() function with different parameters:\n\n# One-sample test\nrodents |&gt; \nwilcox_test(weight~sex, mu = 0)\n\n# Two-samples unpaired test\nrodents |&gt; \nwilcox_test(weight~sex)\n\n# Two-samples paired test\nrodents |&gt;  \nwilcox_test(weight~sex, paired = TRUE)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html#kruskal-wallis-test",
    "href": "basic_statistics.html#kruskal-wallis-test",
    "title": "16¬† Descriptive statistics",
    "section": "16.4 Kruskal-Wallis Test",
    "text": "16.4 Kruskal-Wallis Test\nThe kruskal_test() function allows you to perform Kruskal-Wallis rank sum test.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nkruskal_test(data set name, column name (numeric variable) ~ column name (grouping variable))\n\n\nHere you can see an example of how to use the kruskal_test() function:\n\nrodents |&gt; \nkruskal_test(weight~sex)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html#levenes-test",
    "href": "basic_statistics.html#levenes-test",
    "title": "16¬† Descriptive statistics",
    "section": "16.5 Levene‚Äôs Test",
    "text": "16.5 Levene‚Äôs Test\nThe levene_test() function allows you to perform Levene‚Äôs test assesses whether the variances of two or more groups are equal.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nlevene_test(data set name, column name (numeric variable) ~ column name (grouping variable))\n\n\n\n16.5.1 Useful parameters\n\n\ncenter = - This parameter specifies the center of each group, either mean (original Levene‚Äôs test) or median.\n\n\nHere you can see an example of how to use the levene_test() function with different parameters:\n\nrodents |&gt; \nlevene_test(weight~sex)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html#anova-test",
    "href": "basic_statistics.html#anova-test",
    "title": "16¬† Descriptive statistics",
    "section": "16.6 Anova Test",
    "text": "16.6 Anova Test\nThe anova_test() function allows you to perform different types of ANOVA tests.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nanova_test(data set name, column name (numeric variable) ~ column name (grouping variable))\n\n\nHere you can see an example of how to use the anova_test() function:\n\n# One-way ANOVA test\nrodents |&gt; \nanova_test(weight~sex)\n\n# Two-way ANOVA test\nrodents |&gt; \nanova_test(weight~sex*genus)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "basic_statistics.html#chi-squared-test",
    "href": "basic_statistics.html#chi-squared-test",
    "title": "16¬† Descriptive statistics",
    "section": "16.7 Chi-squared Test",
    "text": "16.7 Chi-squared Test\nThe chisq_test() function allows you to perform chi-squared tests (Goodness-of-Fit Test and Test for Independence) to assess whether there is a significant correlation between categorical variables.\n\n\n\n\n\n\nYou do this by writing:\n\n\n\nchisq_test(data set name, column name (numeric variable))\n\n\n\n16.7.1 Useful parameters\n\n\np = - This parameter specifies the vector of expected probabilities, which have to be of the same length as x.\n\n\nHere you can see an example of how to use the chisq_test() function with different parameters:\n\nrodents |&gt; \nchisq_test(weight)\n\n\n\n\n\n\n\n\nImportant\n\n\n\nTo use all these functions you will need to load library(rstatix)!!!",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>16</span>¬† <span class='chapter-title'>Descriptive statistics</span>"
    ]
  },
  {
    "objectID": "functions_and_loops.html",
    "href": "functions_and_loops.html",
    "title": "17¬† Functions and loops",
    "section": "",
    "text": "To be developed!",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>17</span>¬† <span class='chapter-title'>Functions and loops</span>"
    ]
  },
  {
    "objectID": "practice_questions.html",
    "href": "practice_questions.html",
    "title": "18¬† Practice Questions",
    "section": "",
    "text": "18.1 Mastering the Basics\nWhat function loads a package that is already on your computer? install.packageinstall.packageslibrarylibraries\nWhat library do you need to load in your data set? tidyverserodents_fullhereselect from computer\nWhich function should I use to load in a comma separated dataset? read_csvread_tsvheread_xsxl\nWhat function is used to select specific columns from a dataset? filterselectcolumngroup_by\nWhat function is used to select specific rows from a dataset? filterarrangesummariseselect\nWhich function is used to add new columns or modify existing ones? summarisetibblesummarymutate\nWhich symbol is used for filter c()%in%all of the above==\nWhat is this symbol used for? |&gt; Makes the function run in accordance with previous functionIt stores the output of a function as a variable but does not allow it to be used as an argument in another function.Takes the output of one function and passes it into another function as an argumentIt executes multiple functions simultaneously\nWhich ggplot function would give me a scatterplot? geom_point()ggplot(scatterplot)geom_graph()geom_scatter",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>18</span>¬† <span class='chapter-title'>Practice Questions</span>"
    ]
  },
  {
    "objectID": "practice_questions.html#mastering-the-basics",
    "href": "practice_questions.html#mastering-the-basics",
    "title": "18¬† Practice Questions",
    "section": "",
    "text": "What are the steps to follow every time you start a new quatro doc?\n\n A B C D\n\n\nOpen Quarto and create a new document. Load in the necessary libraries. Load the dataset. Make sure progress is saved to OneDrive or on your computer.\nDelete all previous Quarto documents. Load the dataset before installing any necessary libraries. Restart your computer to ensure a clean workspace. Save the document only after completing all analyses.\nOpen Quarto and immediately run all code chunks without checking the dataset. Load random libraries that might not be needed. Manually enter data instead of loading a dataset. Save the file as a text document instead of a Quarto file.\nLoad the dataset before opening Quarto. Write a full report before installing or loading any libraries. Save the document only in temporary storage. Run analyses without checking if the dataset loaded correctly.",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>18</span>¬† <span class='chapter-title'>Practice Questions</span>"
    ]
  },
  {
    "objectID": "practice_questions.html#manipulating-data-sets",
    "href": "practice_questions.html#manipulating-data-sets",
    "title": "18¬† Practice Questions",
    "section": "18.2 Manipulating data sets",
    "text": "18.2 Manipulating data sets\n\nfilter can be used to group rows: TRUEFALSE\nWhich is the correct form?\n\n filter(species_id = 'GM') filter(species_id %in% c(DM, NL) filter(species_id == %in% c(DM, NL)",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>18</span>¬† <span class='chapter-title'>Practice Questions</span>"
    ]
  },
  {
    "objectID": "practice_questions.html#working-with-ggplot",
    "href": "practice_questions.html#working-with-ggplot",
    "title": "18¬† Practice Questions",
    "section": "18.3 Working with ggplot",
    "text": "18.3 Working with ggplot",
    "crumbs": [
      "Part 3: R fundamentals",
      "<span class='chapter-number'>18</span>¬† <span class='chapter-title'>Practice Questions</span>"
    ]
  },
  {
    "objectID": "code_from_class.html",
    "href": "code_from_class.html",
    "title": "19¬† Code from class",
    "section": "",
    "text": "To be uploaded‚Ä¶",
    "crumbs": [
      "Part 4: Content from classes",
      "<span class='chapter-number'>19</span>¬† <span class='chapter-title'>Code from class</span>"
    ]
  },
  {
    "objectID": "quality_control.html",
    "href": "quality_control.html",
    "title": "20¬† Quality control analysis",
    "section": "",
    "text": "20.1 The Levey-Jennings Chart and Westgard Rules\nLevey-Jennings (LJ) charts are widely used in clinical and analytical laboratories as part of their quality control (QC) processes. They provide a visual representation of repeated experimental measurements of a known standard (an analyte of known concentration). These measurements are often taken daily (or every 12 hours in a 24-hour environment). The LJ chart allows the scientist to assess the consistency and reliability of an experimental procedure. Outliers, (or violations) are identified by following a set of rules. NHS pathology services and many analytical laboratories follow the Westgard Rules. These outliers may indicate that the experimental procedure is not performing to the required standard. However, as we shall see below, occasional outliers are expected even under normal conditions, as random variation in data following a normal distribution will produce such values.\nBelow, we will generate a Levey-Jennings chart and apply a set of rules to identify outliers. First, install the ggQC package and load the libraries that we need.\n# If you don't have ggQC package installed, uncheck the line below and run the install.packages() command to install ggQC package; then delete this line or check it back\n# install.packages(\"ggQC\")\nlibrary (ggQC)\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.4.1\n\n\nWarning: package 'tibble' was built under R version 4.4.1\n\n\nWarning: package 'purrr' was built under R version 4.4.1\n\n\nWarning: package 'lubridate' was built under R version 4.4.1\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.2     ‚úî tibble    3.3.0\n‚úî lubridate 1.9.4     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.4     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nWe need to generate some sample data.. The ‚Äúrun‚Äù is the day of the assay (1-30) The ‚Äúvalue‚Äù is the result of the assay.\nrun &lt;- c(1:30)\nvalue &lt;- c(50.0, 49.1, 53.1, 52.9, 50.6, 49.4, 51.3, 52.3, 50.2, 50.1, 49.8, 49.2,  49.2, 51.4, 50.3, 51.2, 51.8, 49.1, 49.2, 49.9, 49.4, 49.0, 49.6, 49.4, 48.2, 49.4, 48.0, 50.4, 51.2, 54.4)\ndf &lt;- tibble(run = run, value = value)\nWe will now generate a Levey-Jennings plot of the data using the code below. The blue line in the centre is the mean. The red lines indicate 1, 2 or 3 standard deviations from the mean. In this case, both the mean and SD are calculated from the data. Sometimes a LJ chart is generated using a previously established true value of the standard with an associated SD. Many other options are available as part of the ggQC package. In addition, you can generate different types of quality control charts. You can read more here\ndf |&gt; ggplot(aes(x = run, y = value)) + #start ggplot\n  geom_point() + geom_line() + # add the data points and the line\n    stat_QC(method = \"XmR\",    # XmR is for individual data points with a moving Range\n    auto.label = TRUE,         # Use Autolabels\n    label.digits = 1,          # Use one digit in the label\n    show.1n2.sigma = TRUE)     # Show 1 and 2 sigma (SD) lines\nLook at the plot above and compare these results to the Westgard Rules\nIn the data above, three of the Westgard rules have been violated. Can you identify the runs that are a problem? No code is required here, simply look at the plot above and compare the result to the Westgard Rules on the website above.\nCheck your answer by running the code below. This generates a facet plot, highlighting violations in red.\n#create facet plot with QC violations\nggplot(df, aes(x = run, y = value)) + #init ggplot\n  stat_qc_violations(method = \"XmR\" )\nNow, place your cursor over ‚Äústat_qc_violations‚Äù and press F1. You will see that the QC violations in the ggQC package are based on these rules below:\nNotice that the first of these rules is not identical to the Westgard rule. For rule 1, this package is slightly more sensitive as it highlights violations where there are 8 or more consecutive same-side points, while the equivalent Westgard rule states 10 or more same-side points. The other 3 rules above have an equivalent Westgard rule.\nThis is important as various sets of rules for detecting out-of-control or non-random conditions have been proposed and used for different applications:",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Quality control analysis</span>"
    ]
  },
  {
    "objectID": "quality_control.html#the-levey-jennings-chart-and-westgard-rules",
    "href": "quality_control.html#the-levey-jennings-chart-and-westgard-rules",
    "title": "20¬† Quality control analysis",
    "section": "",
    "text": "Violation Same Side: 8 or more consecutive, same-side points\nViolation 1 Sigma: 4 or more consecutive, same-side points exceeding 1 sigma\nViolation 2 Sigma: 2 or more consecutive, same-side points exceeding 2 sigma\nViolation 3 Sigma: any points exceeding 3 sigma\n\n\n\n\nWalter A. Shewhart (1923) Economic Control Of Quality Of Manufactured Product\nWestern Electric Rules- Western Electric Company (1956), Statistical Quality Control Handbook. (1 ed.)\nNelson Rules (1984)\nWestgard Rules (1981)\n\n\n\n\n\n\n\nImportant\n\n\n\nAlways follow the protocol and quality control processes that are used in your workplace ‚Äì it will vary!",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Quality control analysis</span>"
    ]
  },
  {
    "objectID": "quality_control.html#testing-for-outliers-using-normally-distributed-data",
    "href": "quality_control.html#testing-for-outliers-using-normally-distributed-data",
    "title": "20¬† Quality control analysis",
    "section": "20.2 Testing for outliers using normally distributed data",
    "text": "20.2 Testing for outliers using normally distributed data\nThe data provided above was deliberately manipulated to introduce three rule violations. If this was your actual data from one month in an analytical laboratory, it would indicate that serious errors are occurring on a regular basis. You would need to rectify the problem(s) before running any real samples. If your data is from a normal distribution then outliers detected by these rules are quite rare, but they do happen, even if nothing is wrong with the equipment or the user. Use the code below to generate QC plots of 30 data points from a normal distribution with a mean of 40 and SD = 2. Run this code 12 times to see how often outliers might occur in one year under ideal conditions. Remember, if any outliers are detected, even at these rare intevals, you would still need to check all of your equipment and reagents, as you would have no way of knowing if it is a malfunction or just random noise.\n\n# Generate some random data and plot it\ntibble(run = c(1:30),\n      value = rnorm(30, mean =40, sd =2),) |&gt; \n  ggplot (aes(x = run, y = value)) + \n  stat_qc_violations(method = \"XmR\" )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nHow many times were outliers detected? Why are these rules designed so that outliers are rare?",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Quality control analysis</span>"
    ]
  },
  {
    "objectID": "quality_control.html#further-work",
    "href": "quality_control.html#further-work",
    "title": "20¬† Quality control analysis",
    "section": "20.3 Further Work",
    "text": "20.3 Further Work\nYou may have noticed that in the first graph above, the mean was 50.3. This value was calculated from the data. In many analytical processes, the standard will be of a known concentration and the process will have a well established standard deviation. Let us assume that for the data above, the known standard should be 50 units with a standard deviation of 1.3. Can you write R-code to generate a plot of the same data but with:\n\nwith a blue dashed horizontal line at exactly 50 units, label it ‚Äú50‚Äù or ‚Äúmean‚Äù\nwith faint red dashed lines to indicate 1, 2 or 3 standard deviations from 50. Label these lines with ‚Äú-1 SD‚Äù, ‚Äú+1 SD‚Äù, ‚Äú-2 SD‚Äù, ‚Äú+2 SD‚Äù etc.\n\n\n\n\n\n\n\nTips\n\n\n\nuse geom_seqment rather than geom_hline as this allows you to control the endpoint with xend = 30\nuse annotate to add a text label. Set the x = 30.5 as this is the right-side of the plot. Set the y-value to the correct numerical values to get -1 SD, +1 SD, -2 SD, +2 SD etc\n\n\n\n#this is to get you started\ndf |&gt; ggplot(aes(x= run, y=value))+ geom_line()+geom_point()+\n  geom_segment(aes(x = 1, xend = 30, y = 50, yend = 50), # sets the start and end points\n               color = \"blue\",                           # makes it blue\n               linetype = \"dashed\",                     # dashed\n               linewidth = 0.5) +                            # fine \n  annotate(\"text\", x = 30.5, y = 50, label = \"50\", hjust = 0, color = \"blue\") # adds the label \"50\"\n\nWarning in geom_segment(aes(x = 1, xend = 30, y = 50, yend = 50), color = \"blue\", : All aesthetics have length 1, but the data has 30 rows.\n‚Ñπ Please consider using `annotate()` or provide this layer with data containing\n  a single row.",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Quality control analysis</span>"
    ]
  },
  {
    "objectID": "quality_control.html#references",
    "href": "quality_control.html#references",
    "title": "20¬† Quality control analysis",
    "section": "20.4 References",
    "text": "20.4 References\n\nLevey, S., & Jennings, E. R. (1950). The use of control charts in the clinical laboratory. American Journal of Clinical Pathology, 20(11), 1059‚Äì1066. https://doi.org/10.1093/ajcp/20.11_ts.1059\nNelson, L. S. (1984). The Shewhart Control Chart‚ÄîTests for Special Causes. Journal of Quality Technology, 16(4), 237‚Äì239. https://doi.org/10.1080/00224065.1984.11978921\nShewhart, W.A., (1923) Economic Control Of Quality Of Manufactured Product\nWestgard, J. O., Barry, P. L., Hunt, M. R., & Groth, T. (1981). A multi-rule Shewhart chart for quality control in clinical chemistry. Clinical Chemistry, 27(3), 493‚Äì501.\nWestern Electric Rules - Western Electric Company (1956), Statistical Quality Control Handbook (1 ed.).",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Quality control analysis</span>"
    ]
  },
  {
    "objectID": "limit_of_detection.html",
    "href": "limit_of_detection.html",
    "title": "21¬† Limit of Detection",
    "section": "",
    "text": "21.0.1 Getting the data\nThe aim of this guide is to show you how to calculate the Limit of Detection (LOD) and the Limit of Quantitation (LOQ) using R. For a detailed explanation of these terms, please see Armbruster and Pry 2008.\nFirst, install the packages and load the libraries that we need.\nThe sample data below is from an ELISA standard curve. You can read about this ELISA here. The absorbance was measured at 450 nm for seven known concentrations of albumin (ng per ml). The manufacturer claims that this kit ‚ÄúDetects albumin levels from 3.125 ng/ml)‚Äù. Lets see if our real student data compares with this. Load in the data below.\nalbumin_concentration &lt;- c(0.0, 1.4, 2.8, 5.6, 11.1, 22.2, 44.4)\nabsorbance &lt;- c(0.135, 0.215, 0.156, 0.240, 0.324, 0.557, 0.891)\ndf &lt;- tibble(albumin_concentration = albumin_concentration, absorbance = absorbance)\nTake a quick look at the data.\ndf |&gt; \nggplot(aes(x = albumin_concentration, y = absorbance)) +\n  geom_point() +\n  geom_line() +\n  xlab(\"[Albumin] (ng/ml)\") +\n  ylab(\"Absorbance (450 nm)\")",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>21</span>¬† <span class='chapter-title'>Limit of Detection</span>"
    ]
  },
  {
    "objectID": "limit_of_detection.html#adding-the-equation-of-the-line",
    "href": "limit_of_detection.html#adding-the-equation-of-the-line",
    "title": "21¬† Limit of Detection",
    "section": "21.1 Adding the equation of the line",
    "text": "21.1 Adding the equation of the line\nWe will now use stat_poly_eq from the ggpmisc package to display the equation of the line. We specify a linear model using y ~ x.\nAlthough we could still use geom_smooth here, for consistency we will use the stat_poly_line function to add the line. Notice that we use the same equation y ~ x on both lines.\n\ndf |&gt; \n  ggplot(aes(x = albumin_concentration, y = absorbance)) +\n  geom_point() +\n  stat_poly_line(formula = y ~ x) +\n  stat_poly_eq(use_label(\"eq\", \"R2\"), formula = y ~ x) +\n  xlab(\"[Albumin] (ng/ml)\") +\n  ylab(\"Absorbance (450 nm)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat about non-linear data?\n\n\n\nPress F1 on the stat_poly_eq function, run the example given with a polynomial function.\n\n\nIt looks better with the R-squared value positioned under the equation. We can add label.x and label.y values to control the positions of ‚Äúeq‚Äù and ‚ÄúR2‚Äù separately.\n\ndf |&gt; \n  ggplot(aes(x = albumin_concentration, y = absorbance)) +\n  geom_point() +\n  stat_poly_line(formula = y ~ x) +\n  stat_poly_eq(use_label(\"eq\"), formula = y ~ x, label.y = 0.9, label.x = 0.05) +\n  stat_poly_eq(use_label(\"R2\"), formula = y ~ x, label.y = 0.85, label.x = 0.05)+\n  xlab(\"[Albumin] (ng/ml)\") +\n  ylab(\"Absorbance (450 nm)\")",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>21</span>¬† <span class='chapter-title'>Limit of Detection</span>"
    ]
  },
  {
    "objectID": "limit_of_detection.html#the-linear-model",
    "href": "limit_of_detection.html#the-linear-model",
    "title": "21¬† Limit of Detection",
    "section": "21.2 The linear model",
    "text": "21.2 The linear model\nTo calculate the limit of detection, we need to fit a linear model to the data and write all the parameters of this model to an object called ‚Äúlinear_model‚Äù. This object is a list of 12 things and it includes the original data (click on linear_model to view all the parameters).\n\n#fit a linear model to the data\nlinear_model &lt;- lm(absorbance ~ albumin_concentration, data = df)\nlinear_model\n\n\nCall:\nlm(formula = absorbance ~ albumin_concentration, data = df)\n\nCoefficients:\n          (Intercept)  albumin_concentration  \n              0.14691                0.01702  \n\n\nNotice that the coefficients above match with the equation we added to the plot earlier.\n\n21.2.1 The LOD calculation\nWe will now use the chemCal package to calculate the limit of detection (LOD). The LOD is the lowest amount of analyte (or signal) that can be reliably detected by a method. It is defined based on the probability of making a type II error ‚Äî also known as a false negative. A type II error happens when the analyte is actually present, but the method fails to detect it (like type II fun).\nThe default values of the lod function from chemCal are the ones recommended by IUPAC. We can simply run this function on the linear_model from earlier.\n\nlod(linear_model)\n\n$albumin_concentration\n[1] 8.122929\n\n$absorbance\n[1] 0.2851984\n\n\nBelow are the default values. You can read about these in the help section. The probability of a false negative is given by ‚Äòbeta‚Äô and has the default value of 0.05 (a 5% chance of a false negative).\n\n#with default values\nlod(linear_model, \n    alpha = 0.05,\n    beta = 0.05,\n    method = \"default\",\n    tol = \"default\")\n\n$albumin_concentration\n[1] 8.122929\n\n$absorbance\n[1] 0.2851984\n\n\nThe output you see is a list of two values corresponding to the two axes. The LOD is normally stated in units of concentration (the x-axis). You can extract the albumin concentration from the list using the $ sign as below.\n\nlod(linear_model)$albumin_concentration\n\n[1] 8.122929\n\n\nThe units of this value are the same as the x-axis. So‚Ä¶\n\npaste(\"Limit of Detection = \", \n      round(lod(linear_model)$albumin_concentration, 2), #rounds to 2 d.p.\n      \"ng/ml\",\n      sep = \" \") # adds a space between each of the above\n\n[1] \"Limit of Detection =  8.12 ng/ml\"\n\n\nIn the same way, you calculate the Limit of Quantitation using ‚Äúloq‚Äù\n\npaste(\"Limit of Quantitation = \", \n      round(loq(linear_model)$albumin_concentration, 2), #rounds to 2 d.p.\n      \"ng/ml\",\n      sep = \" \") # adds a space between each of the above\n\n[1] \"Limit of Quantitation =  15.2 ng/ml\"\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAlways check your answer looks sensible. Look where the LOD and LOQ values are on the graph and compare it to the data.\n\n\nThe chemCal package has a function for generating a plot of your linear_model object with 95% confidence limits.\n\n#generate a graph\ncalplot(linear_model, xlab = \"[Albumin] (ng/ml)\", ylab = \"Absorbance (450 nm)\")\n\n\n\n\n\n\n\n\nThe two kinds of uncertainty bands around the calibration fitted line are 95% confidence and prediction bands (if you use the default settings). Confidence bands show the uncertainty in the estimate of the average response at each concentration of albumin (or other analyte) ‚Äî how sure we are about the position of the calibration curve itself. These bands are relatively narrow as they only reflect uncertainty in the fitted regression line.\nPrediction bands show the range where we expect new individual measurements to fall at a given concentration. They are always wider because they include not just the uncertainty in the calibration line but also the natural scatter of measurements around that line. Prediction intervals are crucial for LOD: they indicate how much a single absorbance reading could vary at low analyte concentrations, and therefore how confidently we can distinguish a true signal from background noise.\nHere is the same plot generated with tidyverse functions, starting with the same linear model of the df dataset; you will need package broom to extract fitted and predicted values from the model object:\n\nlibrary(broom)\n\n# Confidence band\nconfidence_df &lt;- augment(linear_model, df, interval = \"confidence\") |&gt;\n  select(albumin_concentration, fitted = .fitted, conf_lower = .lower, conf_upper = .upper)\n\n# Prediction band\nprediction_df &lt;- augment(linear_model, newdata = df, interval = \"prediction\") |&gt;\n  select(albumin_concentration, pred_lower = .lower, pred_upper = .upper)\n\n# Combine the two datasets\nplot_df &lt;- full_join(confidence_df, prediction_df, by = \"albumin_concentration\")\n\n# Plot with both confidence and prediction intervals\nplot_df |&gt;\n    ggplot() + aes(x = albumin_concentration, y = fitted) + geom_line() +\n    stat_poly_line(formula = y ~ x) +\n    stat_poly_eq(use_label(\"eq\"), formula = y ~ x, label.y = 0.9, label.x = 0.05) +\n    stat_poly_eq(use_label(\"R2\"), formula = y ~ x, label.y = 0.85, label.x = 0.05) +\n    geom_ribbon(aes(x = albumin_concentration, ymin = pred_lower, ymax = pred_upper, fill = \"Prediction (95%)\"), alpha = 0.15) +\n    geom_ribbon(aes(x = albumin_concentration, ymin = conf_lower, ymax = conf_upper, fill = \"Confidence (95%)\"), alpha = 0.15) +\n    labs(x = \"[Albumin] (ng/ml)\", y = \"Absorbance (450 nm)\", fill = NULL) + \n    theme_minimal()",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>21</span>¬† <span class='chapter-title'>Limit of Detection</span>"
    ]
  },
  {
    "objectID": "limit_of_detection.html#references",
    "href": "limit_of_detection.html#references",
    "title": "21¬† Limit of Detection",
    "section": "21.3 References",
    "text": "21.3 References\n\nArmbruster, D. A., & Pry, T. (2008). Limit of blank, limit of detection and limit of quantitation. The Clinical biochemist. Reviews, 29 (Suppl 1), S49‚ÄìS52",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>21</span>¬† <span class='chapter-title'>Limit of Detection</span>"
    ]
  },
  {
    "objectID": "genomics.html",
    "href": "genomics.html",
    "title": "22¬† Genomics",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>22</span>¬† <span class='chapter-title'>Genomics</span>"
    ]
  },
  {
    "objectID": "phylogenetics.html",
    "href": "phylogenetics.html",
    "title": "23¬† Phylogenetics",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Part 5: Topic-specific content",
      "<span class='chapter-number'>23</span>¬† <span class='chapter-title'>Phylogenetics</span>"
    ]
  },
  {
    "objectID": "index.html#learning-resources-for-our-classes",
    "href": "index.html#learning-resources-for-our-classes",
    "title": "Hudd-R book",
    "section": "1.2 Learning resources for our classes",
    "text": "1.2 Learning resources for our classes\nThroughout the book and the classes we almost exclusively use the tidyverse dialect of R. For the justification, see the page on tidyverse vs base R. Our recommended textbooks to accompany the classes are:\n\nR for Data Science (second edition) by Hadley Wickham, Mine √áetinkaya-Rundel and Garrett Grolemund, for all kinds of practical information on data science and many explanations of the code that we will be learning. An essential reading and a practical source ‚Äî all the code from the book can be executed, followed and modified in your RStudio.\nR Graphics Cookbook (second edition) by Winston Chang, dedicated entirely to using ggplot2, the package that we use to make all the plots and visualisations of data in the class. Contains recipe-like code snippets on how to make and modify almost every plot that we will be making in class.\n\nBoth are freely available online. In addition, there is a wealth of free, online resources, guides and tutorials on learning R - the strenght of online community is one of the great advantages of R over other languages. Feel free to use those resources in your practice, and if you find something particularly useful, let us know!\n\n1.2.1 What about large language models?\nAh, yes, we are glad you asked.",
    "crumbs": [
      "Part 1: Introduction",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>About this book</span>"
    ]
  }
]