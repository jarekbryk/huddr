# Introduction

This book was co-designed and co-written with a group of second-year students at the University of Huddersfield's Division of Biomedical and Life Sciences in 24/25, as a resource for themselves and other students to learn R. As it happened, I had a template for the book ready, as I was trying to do it myself for the past two years :-), and the five of us got it done much more effectively. Technically speaking, practically everything in this book can be found in R help pages, but our idea was to put all of the information that we use in the class in a single place to make it easier to find and use.

## How this book is organised

This book is roughly divided into three major sections:

### Section 1
- *Part 1* deals with preparing your computer for R - installing it, adjusting interface of RStudio, installing packages we use in the class and setting up the working environment in the browser for those who can only use Chromebooks or tablets. This part also contains an important chapter on how to use a computer, with information on fundamental operations on files and folders in Windows or macOS.

### Section 2
- *Part 2* contains the key content of the book: information on the functions we use (including plotting with `ggplot`) and their parameters, examples of their use, as well as information on loading data and dealing with missing data. We anticipate that this is the part that students will be using most often.
- *Part 3* contains information on statistical tests, but it is _not_ a statistics textbook. This part concentrates on _how to_ run statistical tests that you learned last year in R, rather than explaining when to run them, how to check their assumptions and how to interpret their results.
- *Part 4* contains self-checking exercises that run entirely in the browser and are useful to make sure you are "getting it" as you go along.

### Section 3
- *Part 5* deals with loops and functions, topics we introduce fully in the final year, but which occasionally come up in the second year during the analyses. This part is not developed yet, but when it will be, it will be using the "nest-function-map" approach from the `purrr` package.
- *Part 6* contains several chapters, each of which deals with a specific topic, useful in other modules or specific assignments. Currently chapters on quality control and limits of detection are ready (both useful in Professional Skills module assignments), with chapters on genomics and phylogenetics not developed yet (both will be useful in the Current Topics in Molecular Life Sciences assginments).

### Tidyverse vs base R

This book is almost entirely written with the `tidyverse` dialect of R in mind, using RStudio as an integrated development environment (IDE). Base R is only mentioned when we get to square brackets' indexing of lists in the advanced chapters on functions and loops (which we do not teach until the final year). The reason is that I consider `tidyverse` to be easier for beginners to grasp and 99% of what we need to do this year is available through `tidyverse`. `Tidyverse` packages have better help sources available online and they are consistent: operating on data frames with relatively small number of usefully-named functions makes it easier to climb the learning curve. Our recommended textbook to accompany the classes is the second edition of [R for Data Science](https://r4ds.hadley.nz) by Hadley Wickham, Mine Cetinkaya-Rundel and Garett Grolemund, which is freely available online.

For students, I highly recommend reading the following sources to understand the base R vs. `tidyverse` story:

- For the historical overview, read ([or watch](https://www.youtube.com/watch?v=5033jBHFiHE)) Roger Penn's [Teaching R to New Users - From tapply to the Tidyverse](https://simplystatistics.org/posts/2018-07-12-use-r-keynote-2018/).
- David Robinson's [Teach the tidyverse to beginners](http://varianceexplained.org/r/teach-tidyverse/) post that first inspired me to switch to `tidyverse` after a year of teaching base R + `ggplot`.
- Not everyone agrees that `tidyverse` is better, or is better for teaching R, and the two recent contrarian views come from Norm Matloff ([Teaching R in a Kinder, Gentler, More Effective Manner](https://github.com/matloff/TidyverseSkeptic)) and Robert MÃ¼nchen ([Why R is Hard to Learn](https://r4stats.com/articles/why-r-is-hard-to-learn/)).

### How to use a computer

Notably (and importantly for me as a tutor and module leader of the module where we teach R), this book contains a chapter on [how to use a computer](how_to_use_a_computer.html). In my experience in teaching R to undergraduates, many students struggle with _operating_ a computer, which makes learning _the hard stuff_ (data science and programming in R) even trickier. In a recent talk (discussing students' attitudes to learning coding) I presented this slide, which listed common issues I witness every year:

![](images/windows_101_slide.png)

The chapter [How to use a computer](how_to_use_a_computer.html) contains guidelines and animated gifs demonstrating how to accomplish basic operations on files and folders, and explaining the key concepts of paths and file system hierarchy. We very much hope this will be helpful.

From a teaching perspective, a very useful reading in this context is this 30 year-old text (!) by Phil Agre: [How to Help Someone Use a Computer](https://www.librarian.net/stax/4965/how-to-help-someone-use-a-computer-by-phil-agre/). All of his recommendations are still valid today (! again).

### Note on the LLMs

We are aware of the 800-pound _Gorilla gorilla gorilla_ in the room: we live in times where any basic programming task can be effectively (if not efficiently or exactly correctly) completed by a large language model. However, in order to use LLMs effectively, students must understand what they are doing, which is not the case for the majority of them in the first few weeks of coding. Without understanding why and how things work, students are unable to judge the LLM's output; even when they copy-paste the code and it works, they will not be able to solve a similar or related task next time.

This phenomenon - that LLMs are useful only if you already have a good idea what you need to do - is discussed very well by prof. Ethan Mallick in his post [15 Times to use AI, and 5 Not to](https://www.oneusefulthing.org/p/15-times-to-use-ai-and-5-not-to). His final paragraph (emphasis mine):

> Knowing when to use AI turns out to be a form of wisdom, not just technical knowledge. _Like most wisdom, it's somewhat paradoxical: AI is often most useful where we're already expert enough to spot its mistakes, yet least helpful in the deep work that made us experts in the first place. It works best for tasks we could do ourselves but shouldn't waste time on, yet can actively harm our learning when we use it to skip necessary struggles._ 

Secondly, with support from the LLMs readily available, students can concentrate on extracting meaning from data, effectively using their existing knowledge of biological systems to interpret patterns identified in the data (potentially with help of the LLMs).

At this point, however, we do not directly _teach_ the use of LLMs for coding, as we consider the purpose of these sessions to be to acquire fundamental competencies in programmatic data analysis.

### Improving this book

This book is open source. It is published under a very generous MIT License so you may use it and its contents however you like (we would appreciate if you let us know if you do!). If you find a mistake or you want to expand it or suggest a better way of explaining things, please either get in touch with Jarek or, even better, submit a pull request directly [on GitHub](https://github.com/jarekbryk/huddr).

